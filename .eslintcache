[
  {
    "/home/monu/gimly/prosopo-captcha-ui/src/index.tsx": "1",
    "/home/monu/gimly/prosopo-captcha-ui/src/app.tsx": "2",
    "/home/monu/gimly/prosopo-captcha-ui/src/app.styles.ts": "3",
    "/home/monu/gimly/prosopo-captcha-ui/src/api/ProsopoContract.ts": "4",
    "/home/monu/gimly/prosopo-captcha-ui/src/api/ProsopoContractBase.ts": "5",
    "/home/monu/gimly/prosopo-captcha-ui/src/api/Extension.ts": "6",
    "/home/monu/gimly/prosopo-captcha-ui/src/api/storage.ts": "7"
  },
  { size: 270, mtime: 1646644810141, results: "8", hashOfConfig: "9" },
  { size: 4787, mtime: 1647345439361, results: "10", hashOfConfig: "9" },
  { size: 1595, mtime: 1646895612859, results: "11", hashOfConfig: "9" },
  { size: 360, mtime: 1647334002803, results: "12", hashOfConfig: "9" },
  { size: 5622, mtime: 1647345784271, results: "13", hashOfConfig: "9" },
  { size: 3359, mtime: 1646296078811, results: "14", hashOfConfig: "9" },
  { size: 379, mtime: 1646296078811, results: "15", hashOfConfig: "9" },
  {
    filePath: "16",
    messages: "17",
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0
  },
  "2wgnon",
  {
    filePath: "18",
    messages: "19",
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 4,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source: "20"
  },
  {
    filePath: "21",
    messages: "22",
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0
  },
  {
    filePath: "23",
    messages: "24",
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0
  },
  {
    filePath: "25",
    messages: "26",
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0
  },
  {
    filePath: "27",
    messages: "28",
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0
  },
  {
    filePath: "29",
    messages: "30",
    errorCount: 0,
    fatalErrorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0
  },
  "/home/monu/gimly/prosopo-captcha-ui/src/index.tsx",
  [],
  "/home/monu/gimly/prosopo-captcha-ui/src/app.tsx",
  ["31", "32", "33", "34"],
  'import React, {\n  useState,\n  useEffect,\n  ChangeEventHandler,\n  SyntheticEvent\n} from "react";\nimport "./App.css";\nimport { extensionTest } from "./api";\nimport ProsopoContract from "./api/ProsopoContract";\nimport { HttpProvider } from "@polkadot/rpc-provider";\nimport { prosopoMiddleware } from "@prosopo/provider/src/api";\nimport { Environment } from "@prosopo/provider/src/env";\nimport {\n  Avatar,\n  Box,\n  Button,\n  Typography,\n  Autocomplete,\n  TextField\n} from "@mui/material";\nimport { useStyles } from "./app.styles";\n\nimport CaptchaPuzzle from "./mockedResponses/captchaPuzzle.json";\n\nconst contract = new ProsopoContract(\n  new HttpProvider(),\n  "5Guo3SqQguAJERaV1fsCFCyVDWp4AkXCBzYFr84QvESrtiyU"\n);\n\nfunction App() {\n  const [account, setAccount] = useState(null);\n  const classes = useStyles();\n  const [showCaptchas, setShowCaptchas] = useState(false);\n  const [totalNumberOfCaptchas, setTotalNumberOfCaptchas] = useState(0);\n  const [currentCaptchaIndex, setCurrentCaptchaIndex] = useState(0);\n\n  const accounts = contract.extension?.getAllAcounts();\n  const captchas = CaptchaPuzzle.captchas;\n\n  useEffect(() => {\n    setTotalNumberOfCaptchas(captchas.length);\n  }, [captchas]);\n\n  const toggleShowCaptchas = () => {\n    setShowCaptchas(!showCaptchas);\n    setAccount(null);\n  };\n\n  const cancelCaptchasHandler = () => {\n    setShowCaptchas(false);\n    setAccount(null);\n    setCurrentCaptchaIndex(0);\n  };\n\n  const submitCaptchaHandler = () => {\n    if (currentCaptchaIndex === totalNumberOfCaptchas - 1) {\n      setShowCaptchas(!showCaptchas);\n      setAccount(null);\n      setCurrentCaptchaIndex(0);\n    } else {\n      setCurrentCaptchaIndex(currentCaptchaIndex + 1);\n    }\n  };\n\n  // useEffect(() => {\n  //   contract\n  //     .creationPromise()\n  //     .then(() => {\n  //       setAccount(contract.extension.getAccount());\n  //     })\n  //     .catch((err) => {\n  //       console.log(err);\n  //     });\n  // }, []);\n\n  // if (!account) {\n  //   return null;\n  // }\n\n  const accountOnChange = (e: SyntheticEvent<Element, Event>, account: any) => {\n    contract.extension\n      .setAccount(account.address)\n      .then(({ address }) => setAccount(address));\n  };\n\n  // const onClick = () => {\n  //   const provider = contract.getRandomProvider();\n  // };\n\n  return (\n    <Box className={classes.root}>\n      {showCaptchas && !account && (\n        <Autocomplete\n          disablePortal\n          id="select-accounts"\n          options={accounts}\n          value={account}\n          isOptionEqualToValue={(option, value) =>\n            option.address === value.address\n          }\n          onChange={accountOnChange}\n          sx={{ width: 550 }}\n          getOptionLabel={(option: any) =>\n            `${option.meta.name}\\n${option.address}`\n          }\n          renderInput={(params) => (\n            <TextField {...params} label="Select account" />\n          )}\n        />\n      )}\n\n      {showCaptchas && account && (\n        <Box className={classes.captchasContainer}>\n          <Box className={classes.captchasHeader}>\n            <Typography className={classes.captchasHeaderLabel}>\n              Select all images with a bus.\n            </Typography>\n          </Box>\n\n          <Box className={classes.captchasBody}>\n            {Array.from(Array(9).keys()).map((item, index) => {\n              return (\n                <Avatar\n                  key={index}\n                  src="/"\n                  variant="square"\n                  className={classes.captchaItem}\n                />\n              );\n            })}\n\n            <Box className={classes.dotsContainer}>\n              {Array.from(Array(totalNumberOfCaptchas).keys()).map((item) => {\n                return (\n                  <Box\n                    className={classes.dot}\n                    style={{\n                      backgroundColor:\n                        currentCaptchaIndex === item ? "#CFCFCF" : "#FFFFFF"\n                    }}\n                  />\n                );\n              })}\n            </Box>\n          </Box>\n\n          <Box className={classes.captchasFooter}>\n            <Button onClick={cancelCaptchasHandler} variant="text">\n              Cancel\n            </Button>\n            <Button onClick={submitCaptchaHandler} variant="contained">\n              {currentCaptchaIndex === totalNumberOfCaptchas - 1\n                ? "Submit"\n                : "Next"}\n            </Button>\n          </Box>\n        </Box>\n      )}\n\n      {!showCaptchas && !account && (\n        <Button\n          onClick={toggleShowCaptchas}\n          classes={{ root: classes.iAmHumanButton }}\n        >\n          <Typography className={classes.iAmHumanButtonLabel}>\n            I am human\n          </Typography>\n        </Button>\n      )}\n    </Box>\n  );\n}\n\nexport default App;\n',
  "/home/monu/gimly/prosopo-captcha-ui/src/app.styles.ts",
  [],
  "/home/monu/gimly/prosopo-captcha-ui/src/api/ProsopoContract.ts",
  [],
  "/home/monu/gimly/prosopo-captcha-ui/src/api/ProsopoContractBase.ts",
  [],
  "/home/monu/gimly/prosopo-captcha-ui/src/api/Extension.ts",
  [],
  "/home/monu/gimly/prosopo-captcha-ui/src/api/storage.ts",
  [],
  {
    ruleId: "35",
    severity: 1,
    message: "36",
    line: 4,
    column: 3,
    nodeType: "37",
    messageId: "38",
    endLine: 4,
    endColumn: 21
  },
  {
    ruleId: "35",
    severity: 1,
    message: "39",
    line: 8,
    column: 10,
    nodeType: "37",
    messageId: "38",
    endLine: 8,
    endColumn: 23
  },
  {
    ruleId: "35",
    severity: 1,
    message: "40",
    line: 11,
    column: 10,
    nodeType: "37",
    messageId: "38",
    endLine: 11,
    endColumn: 27
  },
  {
    ruleId: "35",
    severity: 1,
    message: "41",
    line: 12,
    column: 10,
    nodeType: "37",
    messageId: "38",
    endLine: 12,
    endColumn: 21
  },
  "@typescript-eslint/no-unused-vars",
  "'ChangeEventHandler' is defined but never used.",
  "Identifier",
  "unusedVar",
  "'extensionTest' is defined but never used.",
  "'prosopoMiddleware' is defined but never used.",
  "'Environment' is defined but never used."
];
